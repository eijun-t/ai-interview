{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Setup Supabase Authentication System",
        "description": "Implement user authentication using Supabase Auth with Google, Microsoft, and GitHub OAuth providers",
        "status": "done",
        "dependencies": [],
        "priority": "high",
        "details": "Configure Supabase project, set up OAuth providers (Google, Microsoft, GitHub), implement authentication hooks and middleware, create user session management. Use @supabase/auth-helpers-nextjs for Next.js integration.",
        "testStrategy": "Test OAuth flows for all providers, verify session persistence, test authentication middleware protection",
        "subtasks": [
          {
            "id": 1,
            "title": "Supabaseプロジェクトのセットアップ",
            "description": "新規Supabaseプロジェクトを作成し、環境変数を設定する",
            "details": "1. Supabaseアカウント作成・ログイン\n2. 新規プロジェクト作成\n3. プロジェクトURL・API Keyの取得\n4. .env.localファイルに環境変数設定\n5. @supabase/supabase-jsライブラリのインストール",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 1
          },
          {
            "id": 2,
            "title": "Supabaseクライアント設定",
            "description": "Next.js用のSupabaseクライアントを設定し、認証ヘルパーをインストール",
            "details": "1. @supabase/auth-helpers-nextjsのインストール\n2. lib/supabase.tsファイル作成\n3. クライアント・サーバー用Supabaseクライアント設定\n4. TypeScript型定義の設定",
            "status": "done",
            "dependencies": [
              "1.1"
            ],
            "parentTaskId": 1
          },
          {
            "id": 3,
            "title": "認証コンポーネントの作成",
            "description": "ログイン・サインアップ・パスワードリセット用のUIコンポーネントを作成",
            "details": "1. components/auth/LoginForm.tsx作成\n2. components/auth/SignUpForm.tsx作成\n3. components/auth/PasswordResetForm.tsx作成\n4. 既存のbutton, card, textareaコンポーネントを活用\n5. フォームバリデーション実装\n6. エラー表示機能の実装",
            "status": "done",
            "dependencies": [
              "1.2"
            ],
            "parentTaskId": 1
          },
          {
            "id": 4,
            "title": "認証ページの作成",
            "description": "ログイン・サインアップ・パスワードリセット用のページを作成",
            "details": "1. app/auth/login/page.tsx作成\n2. app/auth/signup/page.tsx作成\n3. app/auth/reset-password/page.tsx作成\n4. app/auth/layout.tsx作成（認証ページ共通レイアウト）\n5. 各ページに対応するコンポーネントを配置",
            "status": "done",
            "dependencies": [
              "1.3"
            ],
            "parentTaskId": 1
          },
          {
            "id": 5,
            "title": "認証ミドルウェアの実装",
            "description": "ページ保護のためのミドルウェアとセッション管理を実装",
            "details": "1. middleware.tsファイル作成\n2. /interviewページの認証保護実装\n3. 未認証時のリダイレクト処理\n4. セッション状態の管理\n5. 認証状態に基づくナビゲーション制御",
            "status": "done",
            "dependencies": [
              "1.2"
            ],
            "parentTaskId": 1
          },
          {
            "id": 6,
            "title": "認証フックとユーティリティの作成",
            "description": "認証状態管理とユーザー情報取得のためのカスタムフックを作成",
            "details": "1. hooks/useAuth.ts作成\n2. hooks/useUser.ts作成\n3. 認証状態の監視機能\n4. ログアウト機能の実装\n5. ユーザー情報の取得・更新機能",
            "status": "done",
            "dependencies": [
              "1.2"
            ],
            "parentTaskId": 1
          },
          {
            "id": 7,
            "title": "ナビゲーションとレイアウトの更新",
            "description": "認証状態に応じたナビゲーションとレイアウトの更新",
            "details": "1. app/layout.tsxの更新\n2. 認証状態に応じたナビゲーションメニュー\n3. ログイン・ログアウトボタンの実装\n4. ユーザー情報表示の実装\n5. 認証状態に応じたページアクセス制御",
            "status": "done",
            "dependencies": [
              "1.4",
              "1.6"
            ],
            "parentTaskId": 1
          },
          {
            "id": 8,
            "title": "テストと検証",
            "description": "認証システム全体のテストと動作検証",
            "details": "1. メールアドレス/パスワードでのサインアップテスト\n2. ログイン・ログアウト機能のテスト\n3. パスワードリセット機能のテスト\n4. /interviewページの認証保護テスト\n5. セッション永続化のテスト\n6. エラーハンドリングのテスト\n7. レスポンシブデザインの確認",
            "status": "done",
            "dependencies": [
              "1.5",
              "1.7"
            ],
            "parentTaskId": 1
          }
        ]
      },
      {
        "id": 2,
        "title": "Design and Implement Database Schema",
        "description": "Create PostgreSQL database schema for users, companies, interviews, questions, feedback, and industry knowledge",
        "status": "done",
        "dependencies": [
          1
        ],
        "priority": "high",
        "details": "Design tables: users (profiles, auth data), companies (name, info, industry), interviews (sessions, Q&A history), questions (industry-specific), feedback (evaluations), industry_knowledge (question templates). Set up Supabase migrations and RLS policies.",
        "testStrategy": "Validate schema with sample data, test RLS policies, verify foreign key constraints and indexes",
        "subtasks": [
          {
            "id": 1,
            "title": "ユーザーテーブル設計と実装",
            "description": "新卒就活生向けのユーザー情報（名前、大学、学部、部活・サークル、留学経験など）を格納するusersテーブルを設計・実装する。",
            "dependencies": [],
            "details": "usersテーブルには、必要な属性（例：id, name, university, faculty, club, study_abroad, created_atなど）を含める。Supabaseの認証情報と連携できるように設計する。",
            "status": "done",
            "testStrategy": "テストユーザーを作成し、各カラムへのデータ登録・取得・更新・削除が正しく行えることを確認する。"
          },
          {
            "id": 2,
            "title": "面接セッションテーブル設計と実装",
            "description": "面接の履歴やセッション情報を保存するinterview_sessionsテーブルを設計・実装する。",
            "dependencies": [
              1
            ],
            "details": "interview_sessionsテーブルには、ユーザーID（外部キー）、開始日時、終了日時、セッションステータスなどを含める。ユーザーごとの面接履歴が追跡できるようにする。",
            "status": "done",
            "testStrategy": "ユーザーごとに複数の面接セッションを登録し、履歴が正しく紐付くことを確認する。"
          },
          {
            "id": 3,
            "title": "セッションやりとり（Q&A履歴）テーブル設計と実装",
            "description": "面接中のQ&A履歴を保存するsession_qa_historiesテーブルを設計・実装する。",
            "dependencies": [
              2
            ],
            "details": "session_qa_historiesテーブルには、セッションID（外部キー）、質問ID、ユーザー回答、AIフィードバック（必要に応じて）、タイムスタンプなどを含める。",
            "status": "done",
            "testStrategy": "面接セッション中に複数のQ&Aを記録し、セッションごとに正しく履歴が取得できることを確認する。"
          },
          {
            "id": 4,
            "title": "質問・質問テンプレート・業界情報テーブル設計と実装",
            "description": "新卒向け質問プール（自己紹介、志望動機、学生時代経験、業界研究）や業界別質問テンプレート、業界情報を管理するquestions、question_templates、industriesテーブルを設計・実装する。",
            "dependencies": [],
            "details": "questionsテーブルには質問文やカテゴリ、industriesテーブルには業界名や説明、question_templatesテーブルには業界IDと紐付いたテンプレート質問を格納する。",
            "status": "done",
            "testStrategy": "各テーブルにサンプルデータを登録し、業界ごとの質問テンプレートや質問プールが正しく取得できることを確認する。"
          },
          {
            "id": 5,
            "title": "Supabaseマイグレーション・RLSポリシー設定",
            "description": "全テーブルのマイグレーションファイル作成と、ユーザーごとにデータアクセスを制限するRLS（Row Level Security）ポリシーを設定する。",
            "dependencies": [
              1,
              2,
              3,
              4
            ],
            "details": "Supabase CLIでマイグレーションを作成し、RLSでユーザー自身のデータのみアクセス可能とする。必要に応じてテスト用のRLSポリシーも用意する。",
            "status": "done",
            "testStrategy": "異なるユーザーでログインし、他ユーザーのデータにアクセスできないこと、本人のデータにはアクセスできることを確認する。"
          }
        ]
      },
      {
        "id": 3,
        "title": "Build Company Database and Autocomplete System",
        "description": "Create comprehensive company database with autocomplete functionality for Japanese companies",
        "status": "done",
        "dependencies": [
          2
        ],
        "priority": "high",
        "details": "Seed database with listed companies (TSE, Mothers, JASDAQ), new graduate recruiting companies, implement fuzzy search with company name normalization, create API endpoint for autocomplete with debouncing.",
        "testStrategy": "Test autocomplete performance with 10k+ companies, verify search accuracy with partial matches and kanji/katakana variations",
        "subtasks": [
          {
            "id": 1,
            "title": "新卒採用企業データの収集・整形",
            "description": "マイナビ・リクナビから新卒採用企業の正式名称データをスクレイピングし、1万社規模の企業名リストを作成する。",
            "dependencies": [],
            "details": "利用規約を遵守しつつ、企業名のみを抽出・保存する。データはCSV等で管理し、手動で更新できるようにする。",
            "status": "done",
            "testStrategy": "取得した企業名リストに重複や誤りがないかサンプルチェックを行う。"
          },
          {
            "id": 2,
            "title": "Supabase PostgreSQLデータベース設計・構築",
            "description": "企業名リストを格納するためのテーブルをSupabase PostgreSQL上に設計・作成する。",
            "dependencies": [
              1
            ],
            "details": "企業名（正式名称）のみを持つシンプルなテーブルを作成し、初期データをインポートする。手動更新フローも設計する。",
            "status": "done",
            "testStrategy": "テーブル構造とデータインポートの動作確認。手動更新手順の検証。"
          },
          {
            "id": 3,
            "title": "検索用インデックス（GIN）作成とパフォーマンス最適化",
            "description": "部分一致・前方一致検索に最適なGINインデックスを企業名カラムに作成し、100ms以内のレスポンスを目指してパフォーマンスを検証・調整する。",
            "dependencies": [
              2
            ],
            "details": "LIKE/ILIKE検索に対応したインデックス設計。EXPLAIN等でクエリプランを分析し、必要に応じてインデックスやクエリを調整する。",
            "status": "done",
            "testStrategy": "1万件規模で部分一致・前方一致検索を実行し、レスポンス時間を計測。インデックス利用状況をEXPLAINで確認。"
          },
          {
            "id": 4,
            "title": "企業名オートコンプリートAPIの実装",
            "description": "フロントエンドからのリクエストに対し、企業名の部分一致・前方一致検索結果（最大20件）を返すAPIエンドポイント（/api/companies/search）を実装する。",
            "dependencies": [
              3
            ],
            "details": "APIはクエリパラメータqを受け取り、正式名称のみを返す。レスポンス速度・同時アクセス数を考慮し、必要に応じてキャッシュ等も検討する。",
            "status": "done",
            "testStrategy": "APIに対して様々なクエリでリクエストし、正しい件数・内容・速度でレスポンスが返るか確認。"
          },
          {
            "id": 5,
            "title": "フロントエンドのオートコンプリートUI実装とデバウンス対応",
            "description": "APIと連携したオートコンプリートUIを実装し、300msのデバウンス処理を組み込む。",
            "dependencies": [
              4
            ],
            "details": "入力中にAPIへリクエストを送り、正式名称のみを候補として表示。デバウンス処理で無駄なリクエストを抑制する。",
            "status": "done",
            "testStrategy": "入力速度や連打時の挙動、デバウンスが正しく機能しているか、UIの表示件数・内容を確認。"
          }
        ]
      },
      {
        "id": 4,
        "title": "Integrate OpenAI GPT-4o API for Question Generation",
        "description": "Implement AI-powered interview question generation and answer evaluation system",
        "status": "done",
        "dependencies": [
          2,
          3
        ],
        "priority": "high",
        "details": "Create OpenAI API client, design prompts for company-specific question generation, implement answer evaluation with scoring criteria (company understanding, logic, enthusiasm, communication). Add rate limiting and error handling.",
        "testStrategy": "Test question quality with various company types, validate evaluation consistency, verify API rate limiting and error recovery",
        "subtasks": [
          {
            "id": 1,
            "title": "Set Up Next.js API Routes and OpenAI GPT-4o-mini Client",
            "description": "Initialize the Next.js backend with API routes and configure the OpenAI GPT-4o-mini client for secure and efficient communication.",
            "dependencies": [],
            "details": "Create API endpoints in Next.js for handling question generation and answer evaluation requests. Set up environment variables for the OpenAI API key and ensure proper error handling and rate limiting in the API routes.",
            "status": "done",
            "testStrategy": "Verify API endpoints respond correctly to test requests, handle errors gracefully, and enforce rate limits."
          },
          {
            "id": 2,
            "title": "Design Dynamic Prompt Templates for Company-Specific Question Generation",
            "description": "Develop prompt templates that leverage company data to generate relevant interview questions, adjusting for interview duration and category.",
            "dependencies": [
              1
            ],
            "details": "Fetch company information from the companies table and dynamically construct prompts for GPT-4o-mini to generate questions tailored to the selected company, interview category, and time constraints.",
            "status": "done",
            "testStrategy": "Test prompt outputs for various companies, categories, and durations to ensure relevance and diversity."
          },
          {
            "id": 3,
            "title": "Implement Real-Time Voice Interaction with OpenAI TTS/STT APIs",
            "description": "Enable real-time audio-based interview sessions using OpenAI's TTS and STT APIs, supporting dynamic follow-up questions based on user responses.",
            "dependencies": [
              1,
              2
            ],
            "details": "Integrate TTS for question delivery and STT for capturing user answers. Ensure the system can generate follow-up questions in real time, not just from a static list, and synchronize with the 3D avatar's mouth movements.",
            "status": "done",
            "testStrategy": "Simulate interview sessions to confirm accurate voice recognition, natural TTS output, and responsive follow-up question generation."
          },
          {
            "id": 4,
            "title": "Integrate 3D Avatar with Voice and Mouth Synchronization",
            "description": "Connect the 3D avatar system to the audio pipeline, allowing users to select gender and ensuring mouth movements sync with spoken questions and answers.",
            "dependencies": [
              3
            ],
            "details": "Utilize prepared 3D avatar assets and implement real-time mouth movement synchronization based on TTS output. Provide UI for avatar gender selection.",
            "status": "done",
            "testStrategy": "Visually inspect avatar behavior during interviews to ensure accurate mouth sync and correct avatar selection."
          },
          {
            "id": 5,
            "title": "Batch Evaluate Interview Answers Post-Session",
            "description": "After the interview ends, process all user answers in a single batch using GPT-4o-mini to score responses based on company understanding, logic, enthusiasm, and communication.",
            "dependencies": [
              3
            ],
            "details": "Aggregate session answers from session_qa_histories, send them to GPT-4o-mini for evaluation using predefined criteria, and display results to the user without saving them.",
            "status": "done",
            "testStrategy": "Run end-to-end interview simulations and verify that batch evaluation produces accurate, criteria-based feedback for all answers."
          }
        ]
      },
      {
        "id": 5,
        "title": "Implement Web Search Integration with Serper.dev",
        "description": "Add real-time company information gathering using web search API",
        "status": "pending",
        "dependencies": [
          3
        ],
        "priority": "medium",
        "details": "Integrate Serper.dev API, implement search queries for company recruitment pages, IR information, and recent news. Add content parsing and caching (Redis), ensure processing completes within 1 minute with progress indicators.",
        "testStrategy": "Test search accuracy for various company types, verify caching effectiveness, validate processing time limits",
        "subtasks": [
          {
            "id": 1,
            "title": "Integrate Serper.dev API with Next.js API Routes",
            "description": "Set up the Serper.dev API integration within Next.js API routes, ensuring authentication with the provided API key and support for Japanese-language queries.",
            "dependencies": [],
            "details": "Configure API endpoints to accept company names and construct three specific queries: '[企業名] 新卒採用', '[企業名] IR', and '[企業名] 事業概要'. Ensure the API key is securely managed and requests are sent in Japanese.",
            "status": "pending",
            "testStrategy": "Send test requests with sample company names and verify that the API returns valid search results for each query."
          },
          {
            "id": 2,
            "title": "Implement Search Result Retrieval and Page Content Parsing",
            "description": "For each query, retrieve the top 5 search results and fetch the full content of each result URL. Parse and extract the main text content from each page.",
            "dependencies": [
              1
            ],
            "details": "Use a headless browser or HTTP client to fetch and parse the HTML content of each URL. Handle cases where page retrieval or parsing fails by skipping those entries.",
            "status": "pending",
            "testStrategy": "Verify that for each query, up to 5 pages are fetched and their main text content is extracted. Confirm that failures are logged and skipped without interrupting the process."
          },
          {
            "id": 3,
            "title": "Implement Redis Caching for Company Search Results",
            "description": "Cache the parsed content for each company in Redis with a 1-day expiration, using the company name as the cache key.",
            "dependencies": [
              2
            ],
            "details": "Before executing a new search, check Redis for existing cached results. If present, use the cached data; otherwise, proceed with the search and store the results in Redis.",
            "status": "pending",
            "testStrategy": "Test cache hits and misses by repeating searches for the same company within and after the cache expiration period. Confirm correct cache key usage and expiration."
          },
          {
            "id": 4,
            "title": "Implement Real-Time Progress Updates via WebSocket or SSE",
            "description": "Provide real-time progress updates to the frontend during the search and parsing process using WebSocket or Server-Sent Events (SSE).",
            "dependencies": [
              2
            ],
            "details": "Emit progress events at key stages (e.g., per query, per page fetched) to update a progress bar on the '面接官が準備中です' screen. Ensure updates are sent until completion or timeout.",
            "status": "pending",
            "testStrategy": "Simulate the process and verify that progress updates are received in real time by the frontend, accurately reflecting backend processing stages."
          },
          {
            "id": 5,
            "title": "Implement Error Handling and Timeout Management",
            "description": "Ensure robust error handling for missing search results, page fetch failures, and API errors. Guarantee that the process completes within 30 seconds and always proceeds to the interview step.",
            "dependencies": [
              3,
              4
            ],
            "details": "Design the workflow to skip failed pages, continue on API errors, and enforce a 30-second timeout. Ensure that even if no results are found, the system advances to the next step with an empty or partial context.",
            "status": "pending",
            "testStrategy": "Induce errors (e.g., network failures, empty results) and confirm that the system handles them gracefully, completes within the time limit, and always transitions to the interview phase."
          }
        ]
      },
      {
        "id": 6,
        "title": "Create Interactive Interview Chat System",
        "description": "Build real-time chat interface for conducting mock interviews with AI interviewer",
        "status": "pending",
        "dependencies": [
          4,
          5
        ],
        "priority": "medium",
        "details": "Implement WebSocket or Server-Sent Events for real-time communication, add typing indicators, allow dynamic question count adjustment, integrate with OpenAI for contextual follow-up questions.",
        "testStrategy": "Test real-time communication, verify message ordering, test concurrent interviews, validate question flow logic"
      },
      {
        "id": 7,
        "title": "Implement Web Speech API Integration",
        "description": "Add voice input/output capabilities with gender selection for speech synthesis",
        "status": "pending",
        "dependencies": [
          6
        ],
        "priority": "medium",
        "details": "Integrate Web Speech API for voice recognition and synthesis, implement male/female voice selection, add fallback for text input, handle browser compatibility issues and permissions.",
        "testStrategy": "Test voice recognition accuracy, verify speech synthesis quality, test cross-browser compatibility, validate fallback mechanisms"
      },
      {
        "id": 8,
        "title": "Build Industry-Specific Question Database",
        "description": "Create comprehensive question database categorized by industry with template variations",
        "status": "pending",
        "dependencies": [
          2
        ],
        "priority": "medium",
        "details": "Research and compile industry-specific interview questions, create question templates for common topics (motivation, achievements), implement question categorization and tagging system, support question inheritance and customization.",
        "testStrategy": "Validate question coverage across all major industries, test question randomization and relevance scoring"
      },
      {
        "id": 9,
        "title": "Develop Comprehensive Feedback System",
        "description": "Create detailed post-interview analysis and feedback generation with scoring metrics",
        "status": "pending",
        "dependencies": [
          4,
          6
        ],
        "priority": "medium",
        "details": "Implement evaluation algorithms for company understanding, logical thinking, enthusiasm, and communication skills. Generate detailed reports with specific improvement suggestions, save feedback history, create user dashboard for progress tracking.",
        "testStrategy": "Validate evaluation consistency, test feedback quality with sample interviews, verify report generation and storage"
      },
      {
        "id": 10,
        "title": "Setup Production Infrastructure and Deployment",
        "description": "Configure Vercel deployment, Redis caching, and production environment setup",
        "status": "pending",
        "dependencies": [
          1,
          2
        ],
        "priority": "low",
        "details": "Configure Vercel deployment pipeline, set up Redis for session management and company data caching, implement environment variable management, configure monitoring and logging, set up CI/CD with automated testing.",
        "testStrategy": "Test deployment pipeline, verify Redis connectivity, validate environment configurations, test production performance"
      }
    ],
    "metadata": {
      "projectName": "AI Interview System",
      "totalTasks": 10,
      "sourceFile": ".taskmaster/docs/prd.txt",
      "generatedAt": "2025-07-07",
      "created": "2025-07-08T11:00:07.353Z",
      "description": "Tasks for master context",
      "updated": "2025-07-12T10:54:08.212Z"
    }
  }
}